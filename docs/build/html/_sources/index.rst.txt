pytket
======

.. image:: CQCLogo.png
   :width: 120px
   :align: right

``pytket`` is a python module for interfacing with `CQC`_ t|ket>, a set of
quantum programming tools. We currently support circuits and device
architectures from Google `Cirq`_, IBM `Qiskit`_, `AQT`_, `Honeywell`_,
`QSharp`_, `Pyzx`_, `ProjectQ`_ and Rigetti `pyQuil`_, allowing the t|ket> tools
to be used in conjunction with projects on these platforms.

Getting Started
~~~~~~~~~~~~~~~

``pytket`` is available for Python 3.6, 3.7 and 3.8, on Linux and MacOS.
To install, run

``pip install pytket``

To use ``pytket``, you can simply import the appropriate modules into your python code or in an interactive Python notebook. We can build circuits directly using the ``pytket`` interface by creating a blank circuit and adding gates in the order we want to apply them.

::

    from pytket import Circuit
    c = Circuit(2,2) # define a circuit with 2 qubits and 2 bits
    c.H(0)           # add a Hadamard gate to qubit 0
    c.Rz(0.25, 0)    # add an Rz gate of angle 0.25*pi to qubit 0
    c.CX(1,0)        # add a CX gate with control qubit 1 and target qubit 0
    c.measure_all()  # measure qubits 0 and 1, recording the results in bits 0 and 1

Some of the extension modules define :py:class:`Backend` s, allowing the circuits to be run on simulators or real quantum hardware. For example, ``pytket-qiskit`` grants access to the :py:class:`AerBackend` simulator which can sample from measurements.

::

    from pytket.backends.ibm import AerBackend
    b = AerBackend()                # connect to the backend
    b.compile_circuit(c)            # compile the circuit to satisfy the backend's requirements
    handle = b.process_circuit(c, 100)  # submit the job to run the circuit 100 times
    counts = b.get_counts(handle)   # retrieve and summarise the results
    print(counts)

This prints out a summary of readouts (the final values of the classical bits) and their frequencies.

::
    
    {(0, 0): 49, (1, 0): 51}

See the `Getting Started`_ page for a basic tutorial on using
``pytket``. To get more in depth on features, see the `examples`_.

Extensions
~~~~~~~~~~

To use pytket in conjunction with other platforms you must download an
additional separate module for each. Each one of these adds either some new 
methods to the ``pytket`` package to convert between the circuit 
representations, or some new backends to submit circuits to within ``pytket``. 

For each extension module:

Qiskit: ``pip install pytket-qiskit``

Cirq: ``pip install pytket-cirq``

PyQuil: ``pip install pytket-pyquil``

ProjectQ: ``pip install pytket-projectq``

AQT: ``pip install pytket-aqt``

Honeywell: ``pip install pytket-honeywell``

QSharp: ``pip install pytket-qsharp``

PyZX: ``pip install pytket-pyzx``

LICENCE
~~~~~~~

Copyright 2020 Cambridge Quantum Computing

Licensed under a Non-Commercial Use Software Licence (the "Licence");
you may not use this product except in compliance with the Licence.
You may view a copy of the Licence on the `LICENCE`_ page.

Unless required by applicable law or agreed to in writing, software
distributed under the Licence is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and
limitations under the Licence, but note it is strictly for non-commercial use.

.. _Cirq: https://www.github.com/quantumlib/cirq
.. _Qiskit: https://qiskit.org
.. _AQT: https://www.aqt.eu/services/
.. _Honeywell: https://www.honeywell.com/en-us/company/quantum
.. _QSharp: https://docs.microsoft.com/en-us/quantum/
.. _Pyzx: https://github.com/Quantomatic/pyzx
.. _ProjectQ: https://github.com/ProjectQ-Framework/ProjectQ
.. _pyQuil: http://rigetti.com/forest
.. _Getting Started: getting_started.html
.. _examples: https://github.com/CQCL/pytket/blob/master/examples
.. _source: https://github.com/Quantomatic/pyzx
.. _LICENCE: licence.html
.. _CQC: https://cambridgequantum.com

.. |PyPI version| image:: https://badge.fury.io/py/pytket.svg
   :target: https://badge.fury.io/py/pytket
.. |Documentation Status| image:: https://readthedocs.org/projects/pytket/badge/?version=latest
   :target: https://pytket.readthedocs.io/en/latest/?badge=latest
.. toctree::
    :caption: Contents:
    :maxdepth: 1

    getting_started.rst
    changelog.rst
    install.rst
    licence.rst
    opensource.rst

.. toctree::
    :caption: API Reference:
    :maxdepth: 2

    backends.rst
    circuit.rst
    device.rst
    passes.rst
    predicates.rst
    program.rst
    partition.rst
    qasm.rst
    quipper.rst
    routing.rst
    transform.rst
    utils.rst
    logging.rst
    cirq.rst
    projectq.rst
    pyquil.rst
    pyzx.rst
    qiskit.rst

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
